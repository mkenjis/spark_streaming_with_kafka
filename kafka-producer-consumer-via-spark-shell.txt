
// Exemplo streaming com consumer kafka e producer kafka

import org.apache.kafka.common.serialization.StringDeserializer
import org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent
import org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe

import org.apache.spark.streaming.StreamingContext; 
import org.apache.spark.streaming.Seconds; 
import org.apache.spark.streaming.kafka010.KafkaUtils; 

val kafkaParams = Map[String, Object](
  "bootstrap.servers" -> "ubkafka:9092",
  "key.deserializer" -> classOf[StringDeserializer],
  "value.deserializer" -> classOf[StringDeserializer],
  "group.id" -> "use_a_separate_group_id_for_each_stream",
  "auto.offset.reset" -> "latest",
  "enable.auto.commit" -> (false: java.lang.Boolean)
)

val kafkaParams = Map[String, Object](
  "bootstrap.servers" -> "ubkafka:9092",
  "key.deserializer" -> "org.apache.kafka.common.serialization.StringDeserializer",
  "value.deserializer" -> "org.apache.kafka.common.serialization.StringDeserializer",
  "group.id" -> "use_a_separate_group_id_for_each_stream",
  "auto.offset.reset" -> "latest",
  "enable.auto.commit" -> (false: java.lang.Boolean)
)

val ssc = new StreamingContext(sc, Seconds(5))

val topics = Array("test")

val stream = KafkaUtils.createDirectStream[String, String](
  ssc,
  PreferConsistent,
  Subscribe[String, String](topics, kafkaParams)
)

val result = stream.map(record => (record.key, record.value))

import kfkProducerWrapper.KafkaProducerWrapper

result.foreachRDD( rdd  => {
  rdd.foreachPartition( iter  => {
    KafkaProducerWrapper.brokerList = "ubkafka:9092"
    val producer = KafkaProducerWrapper.instance
    iter.foreach( { case (vkey, vvalue) =>
      producer.send("metric", vkey, vvalue) } )
    })
})
 
sc.setCheckpointDir("/home/hadoop/checkpoint")

ssc.start()

------------------------------------------

// Exemplo streaming com consumer kafka e producer kafka com Machine Learning

import org.apache.kafka.common.serialization.StringDeserializer
import org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent
import org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe

import org.apache.spark.streaming.StreamingContext; 
import org.apache.spark.streaming.Seconds; 
import org.apache.spark.streaming.kafka010.KafkaUtils; 

val kafkaParams = Map[String, Object](
  "bootstrap.servers" -> "ubkafka:9092",
  "key.deserializer" -> classOf[StringDeserializer],
  "value.deserializer" -> classOf[StringDeserializer],
  "group.id" -> "use_a_separate_group_id_for_each_stream",
  "auto.offset.reset" -> "latest",
  "enable.auto.commit" -> (false: java.lang.Boolean)
)

val ssc = new StreamingContext(sc, Seconds(5))

val topics = Array("test")

val stream = KafkaUtils.createDirectStream[String, String](
  ssc,
  PreferConsistent,
  Subscribe[String, String](topics, kafkaParams)
)

val result = stream.map(record => (record.key, record.value))

import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.clustering.KMeansModel

val savedKMeansModel = KMeansModel.load(sc, "models/kmean")

import kfkProducerWrapper.KafkaProducerWrapper

result.foreachRDD( rdd => {
  val KMModel = savedKMeansModel
  rdd.foreachPartition( iter => {
    KafkaProducerWrapper.brokerList = "ubkafka:9092"
    val producer = KafkaProducerWrapper.instance
    val obs1 = iter.map(r => r._2.split(",").map(x => x.toDouble))
    val vector = obs1.map(x => Vectors.dense(x(0), x(1), x(2), x(3)))
    val pred = vector.map(x => KMModel.predict(x))
	pred.foreach({ x => producer.send("metric", "key", x.toString) })
  })
})
 
sc.setCheckpointDir("/home/hadoop/checkpoint")

ssc.start()